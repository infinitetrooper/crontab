{
  "backgroundColor": "{{appsmith.theme.colors.backgroundColor}}",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 83,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{\n{\n  \"cron\": create_cron.data?.response,\n  \"prompt\": \"\",\n\t\"isLoading\": create_cron.isLoading || false\n}\n}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "backgroundColor"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "generate_cron_with_ai"
    }
  ],
  "events": [
    "generate_cron_with_ai"
  ],
  "generate_cron_with_ai": "{{create_cron.run().then(() => {});}}",
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "f7qeuvhxv9",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 34,
  "mobileLeftColumn": 21,
  "mobileRightColumn": 44,
  "mobileTopRow": 4,
  "needsErrorInfo": false,
  "parentColumnSpace": 10.34375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "/* Import Google Font */\n@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap\");\n#cron-widget {\n  font-family: \"Inter\", sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 300px;\n  background-color: #F5F7FA;\n}\n\n.container {\n  background-color: #FFFFFF;\n  padding: 30px;\n  border-radius: 16px;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);\n  max-width: 800px;\n  width: 100%;\n  margin: 0 auto;\n}\n\n.description {\n  padding: 20px;\n  background-color: #F9FAFB;\n  border-radius: 8px;\n  font-size: 24px;\n  color: #1F2937;\n  border: 1px solid #E5E7EB;\n  word-wrap: break-word;\n  margin-bottom: 40px;\n  text-align: center;\n}\n\n.description.error {\n  color: #B91C1C;\n  background-color: #FEF2F2;\n  border-color: #FECACA;\n}\n\n/* AI Prompt Section */\n.ai-prompt-section {\n  margin-bottom: 25px;\n  /* Align with cron-description */\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n}\n\n.ai-prompt-section p {\n  font-size: 16px;\n  color: #4B5563;\n  margin-bottom: 10px;\n}\n\n.ai-input-group {\n  display: flex;\n  align-items: center;\n}\n\n#ai-prompt-input {\n  flex: 1;\n  padding: 14px 16px;\n  border: 1px solid #D1D5DB;\n  border-radius: 8px;\n  font-size: 16px;\n  outline: none;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  color: #374151;\n}\n\n#ai-prompt-input:focus {\n  border-color: #FF6A00;\n  box-shadow: 0 0 0 3px rgba(255, 106, 0, 0.2);\n}\n\n#ai-generate-button {\n  padding: 14px 16px;\n  border: none;\n  background-color: #FF6A00;\n  color: #FFFFFF;\n  border-radius: 8px;\n  font-size: 16px;\n  cursor: pointer;\n  margin-left: 8px;\n}\n\n#ai-generate-button:hover {\n  background-color: #e65e00;\n}\n\n#ai-generate-button:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(255, 106, 0, 0.2);\n}\n\n.input-group {\n  width: 100%;\n  margin-bottom: 25px;\n  text-align: center;\n}\n\n#cron-input {\n  padding: 14px 16px;\n  border: 1px solid #D1D5DB;\n  border-radius: 8px;\n  font-size: 24px;\n  outline: none;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  color: #374151;\n  width: 60%;\n  display: inline-block;\n  text-align: center;\n}\n\n#cron-input:focus {\n  border-color: #FF6A00;\n  box-shadow: 0 0 0 3px rgba(255, 106, 0, 0.2);\n}\n\n.info-section {\n  margin-top: 20px;\n}\n\n.info-section h3 {\n  font-size: 18px;\n  color: #1E293B;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  font-weight: 600;\n}\n\n.info-section p {\n  font-size: 16px;\n  color: #4B5563;\n  margin-bottom: 8px;\n}\n\n.cron-table-horizontal {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.cron-table-horizontal th,\n.cron-table-horizontal td {\n  border: 1px solid #E5E7EB;\n  padding: 12px 15px;\n  text-align: center;\n  font-size: 12px;\n  color: #1F2937;\n}\n\n.cron-table-horizontal th {\n  background-color: #F9FAFB;\n  font-weight: 500;\n}\n\n.cron-table-horizontal tr:nth-child(even) {\n  background-color: #F9FAFB;\n}",
    "html": "<div id=\"cron-widget\">\n  <div class=\"container\">\n    <div id=\"cron-description\" class=\"description\"></div>\n\n    <!-- Cron Expression Input -->\n    <div class=\"input-group\">\n      <input\n        type=\"text\"\n        id=\"cron-input\"\n        value=\"* * * * *\"\n        placeholder=\"Enter cron expression\"\n      />\n    </div>\n\t\t\n\t\t<!-- AI Prompt Section -->\n    <div class=\"ai-prompt-section\">\n      <p>Generate with AI</p>\n      <div class=\"ai-input-group\">\n        <input\n          type=\"text\"\n          id=\"ai-prompt-input\"\n          placeholder=\"Every minute of every day\"\n        />\n        <button id=\"ai-generate-button\">Generate</button>\n      </div>\n    </div>\n\n    <!-- Info Section -->\n    <div class=\"info-section\">\n      <p>\n        The cron expression is made up of five fields. Each field can have the following values:\n      </p>\n\n      <!-- Allowed Values Table -->\n      <table class=\"cron-table-horizontal\">\n        <thead>\n          <tr>\n            <th>Minute</th>\n            <th>Hour</th>\n            <th>Day of Month</th>\n            <th>Month</th>\n            <th>Day of Week</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>0-59</td>\n            <td>0-23</td>\n            <td>1-31</td>\n            <td>1-12</td>\n            <td>0-7 (0 or 7 for Sun)</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p>\n        Each field also supports the below symbols:\n      </p>\n      <!-- Supported Operators Table -->\n      <table class=\"cron-table-horizontal\">\n        <thead>\n          <tr>\n            <th>*</th>\n            <th>,</th>\n            <th>-</th>\n            <th>/</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Any value</td>\n            <td>Value list separator</td>\n            <td>Range of values</td>\n            <td>Step values</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>",
    "js": "// Wait for the document to load\nappsmith.onReady(function () {\n  // Load the cronstrue script\n  loadScript('https://cdn.jsdelivr.net/npm/cronstrue@2.14.0/dist/cronstrue.min.js', function () {\n    initializeWidget();\n  });\n});\n\n// Function to load external scripts\nfunction loadScript(src, callback) {\n  const script = document.createElement('script');\n  script.src = src;\n  script.onload = callback;\n  document.head.appendChild(script);\n}\n\n// Initialize the widget after scripts are loaded\nfunction initializeWidget() {\n  const cronInput = document.getElementById('cron-input');\n  const aiPromptInput = document.getElementById('ai-prompt-input');\n  const aiGenerateButton = document.getElementById('ai-generate-button');\n  const cronDescription = document.getElementById('cron-description');\n\n  // Debounce function to limit the rate of parsing\n  function debounce(func, delay) {\n    let debounceTimer;\n    return function () {\n      const context = this;\n      const args = arguments;\n      clearTimeout(debounceTimer);\n      debounceTimer = setTimeout(() => func.apply(context, args), delay);\n    };\n  }\n\n  // Function to parse the cron expression\n  const parseCronExpression = () => {\n    const cronExpression = cronInput.value.trim();\n    try {\n      if (cronExpression === '') {\n        cronDescription.textContent = '';\n        cronDescription.classList.remove('error');\n        return;\n      }\n      // Get human-readable description using cronstrue\n      const description = cronstrue.toString(cronExpression);\n      cronDescription.textContent = description;\n      cronDescription.classList.remove('error');\n    } catch (error) {\n      cronDescription.textContent = 'Invalid cron expression.';\n      cronDescription.classList.add('error');\n    }\n  };\n\n  // Add input event listener with debounce\n  cronInput.addEventListener('input', debounce(parseCronExpression, 300));\n\n  // Parse the default cron expression on load\n  parseCronExpression();\n  let cron_loading = false;\n  // Handle model changes\n  appsmith.onModelChange(newModel => {\n    // Check if newModel.cron is neither null, undefined, nor an empty string, and if it differs from the current input value\n    if (!!newModel.cron && !!newModel.cron.trim() && newModel.cron !== cronInput.value.trim()) {\n      // Update the input value only if it has changed\n      cronInput.value = newModel.cron;\n      // Update the cron description\n      parseCronExpression();\n    }\n    console.log(\"cron_loading \", cron_loading);\n    if (newModel.isLoading !== cron_loading) {\n      console.log(\"newModel \", newModel.isLoading);\n      aiGenerateButton.innerHTML = !!newModel.isLoading ? \"Generating...\" : \"Generate\";\n      cron_loading = newModel.isLoading;\n    }\n  });\n\n  // Event listener for AI prompt input (Enter key)\n  aiPromptInput.addEventListener('keydown', function (event) {\n    if (event.key === 'Enter') {\n      const prompt = aiPromptInput.value.trim();\n      if (prompt !== '' && !cron_loading) {\n        // Update model with AI prompt and trigger event to generate cron\n        appsmith.updateModel({\n          prompt: prompt\n        });\n        appsmith.triggerEvent('generate_cron_with_ai');\n      }\n    }\n  });\n\n  // Event listener for AI Generate button\n  aiGenerateButton.addEventListener('click', function () {\n    const prompt = aiPromptInput.value.trim();\n    if (prompt !== '' && !cron_loading) {\n      // Update model with AI prompt and trigger event to generate cron\n      appsmith.updateModel({\n        prompt: prompt\n      });\n      appsmith.triggerEvent('generate_cron_with_ai');\n    }\n  });\n  let loader = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" class=\"lds-spinner\" style=\"background: none;\">\n  <g transform=\"rotate(0 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.9166666666666666s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(30 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.8333333333333334s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(60 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.75s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(90 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.6666666666666666s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(120 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.5833333333333334s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(150 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.5s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(180 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.4166666666666667s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(210 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.3333333333333333s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(240 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.25s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(270 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.16666666666666666s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(300 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.08333333333333333s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(330 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"0s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n</svg>\n`;\n}"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "/* Import Google Font */\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap');\n\n#cron-widget {\n  font-family: 'Inter', sans-serif;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 300px;\n  background-color: #F5F7FA;\n}\n\n.container {\n  background-color: #FFFFFF;\n  padding: 30px;\n  border-radius: 16px;\n  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);\n  max-width: 800px;\n  width: 100%;\n  margin: 0 auto;\n}\n\n.description {\n  padding: 20px;\n  background-color: #F9FAFB;\n  border-radius: 8px;\n  font-size: 24px;\n  color: #1F2937;\n  border: 1px solid #E5E7EB;\n  word-wrap: break-word;\n  margin-bottom: 40px;\n  text-align: center;\n}\n\n.description.error {\n  color: #B91C1C;\n  background-color: #FEF2F2;\n  border-color: #FECACA;\n}\n\n/* AI Prompt Section */\n.ai-prompt-section {\n  margin-bottom: 25px;\n  /* Align with cron-description */\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n}\n\n.ai-prompt-section p {\n  font-size: 16px;\n  color: #4B5563;\n  margin-bottom: 10px;\n}\n\n.ai-input-group {\n  display: flex;\n  align-items: center;\n}\n\n#ai-prompt-input {\n  flex: 1;\n  padding: 14px 16px;\n  border: 1px solid #D1D5DB;\n  border-radius: 8px;\n  font-size: 16px;\n  outline: none;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  color: #374151;\n}\n\n#ai-prompt-input:focus {\n  border-color: #FF6A00;\n  box-shadow: 0 0 0 3px rgba(255, 106, 0, 0.2);\n}\n\n#ai-generate-button {\n  padding: 14px 16px;\n  border: none;\n  background-color: #FF6A00;\n  color: #FFFFFF;\n  border-radius: 8px;\n  font-size: 16px;\n  cursor: pointer;\n  margin-left: 8px;\n}\n\n#ai-generate-button:hover {\n  background-color: #e65e00;\n}\n\n#ai-generate-button:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(255, 106, 0, 0.2);\n}\n\n.input-group {\n  width: 100%;\n  margin-bottom: 25px;\n  text-align: center;\n}\n\n#cron-input {\n  padding: 14px 16px;\n  border: 1px solid #D1D5DB;\n  border-radius: 8px;\n  font-size: 24px;\n  outline: none;\n  transition: border-color 0.3s, box-shadow 0.3s;\n  color: #374151;\n  width: 60%;\n  display: inline-block;\n  text-align: center;\n}\n\n#cron-input:focus {\n  border-color: #FF6A00;\n  box-shadow: 0 0 0 3px rgba(255, 106, 0, 0.2);\n}\n\n.info-section {\n  margin-top: 20px;\n}\n\n.info-section h3 {\n  font-size: 18px;\n  color: #1E293B;\n  margin-top: 20px;\n  margin-bottom: 10px;\n  font-weight: 600;\n}\n\n.info-section p {\n  font-size: 16px;\n  color: #4B5563;\n  margin-bottom: 8px;\n}\n\n.cron-table-horizontal {\n  width: 100%;\n  border-collapse: collapse;\n  margin-bottom: 20px;\n}\n\n.cron-table-horizontal th,\n.cron-table-horizontal td {\n  border: 1px solid #E5E7EB;\n  padding: 12px 15px;\n  text-align: center;\n  font-size: 12px;\n  color: #1F2937;\n}\n\n.cron-table-horizontal th {\n  background-color: #F9FAFB;\n  font-weight: 500;\n}\n\n.cron-table-horizontal tr:nth-child(even) {\n  background-color: #F9FAFB;\n}",
    "html": "<div id=\"cron-widget\">\n  <div class=\"container\">\n    <div id=\"cron-description\" class=\"description\"></div>\n\n    <!-- Cron Expression Input -->\n    <div class=\"input-group\">\n      <input\n        type=\"text\"\n        id=\"cron-input\"\n        value=\"* * * * *\"\n        placeholder=\"Enter cron expression\"\n      />\n    </div>\n\t\t\n\t\t<!-- AI Prompt Section -->\n    <div class=\"ai-prompt-section\">\n      <p>Generate with AI</p>\n      <div class=\"ai-input-group\">\n        <input\n          type=\"text\"\n          id=\"ai-prompt-input\"\n          placeholder=\"Every minute of every day\"\n        />\n        <button id=\"ai-generate-button\">Generate</button>\n      </div>\n    </div>\n\n    <!-- Info Section -->\n    <div class=\"info-section\">\n      <p>\n        The cron expression is made up of five fields. Each field can have the following values:\n      </p>\n\n      <!-- Allowed Values Table -->\n      <table class=\"cron-table-horizontal\">\n        <thead>\n          <tr>\n            <th>Minute</th>\n            <th>Hour</th>\n            <th>Day of Month</th>\n            <th>Month</th>\n            <th>Day of Week</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>0-59</td>\n            <td>0-23</td>\n            <td>1-31</td>\n            <td>1-12</td>\n            <td>0-7 (0 or 7 for Sun)</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <p>\n        Each field also supports the below symbols:\n      </p>\n      <!-- Supported Operators Table -->\n      <table class=\"cron-table-horizontal\">\n        <thead>\n          <tr>\n            <th>*</th>\n            <th>,</th>\n            <th>-</th>\n            <th>/</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Any value</td>\n            <td>Value list separator</td>\n            <td>Range of values</td>\n            <td>Step values</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>",
    "js": "// Wait for the document to load\nappsmith.onReady(function () {\n\t// Load the cronstrue script\n\tloadScript(\n\t\t'https://cdn.jsdelivr.net/npm/cronstrue@2.14.0/dist/cronstrue.min.js',\n\t\tfunction () {\n\t\t\tinitializeWidget();\n\t\t}\n\t);\n});\n\n// Function to load external scripts\nfunction loadScript(src, callback) {\n\tconst script = document.createElement('script');\n\tscript.src = src;\n\tscript.onload = callback;\n\tdocument.head.appendChild(script);\n}\n\n// Initialize the widget after scripts are loaded\nfunction initializeWidget() {\n\tconst cronInput = document.getElementById('cron-input');\n\tconst aiPromptInput = document.getElementById('ai-prompt-input');\n\tconst aiGenerateButton = document.getElementById('ai-generate-button');\n\tconst cronDescription = document.getElementById('cron-description');\n\n\t// Debounce function to limit the rate of parsing\n\tfunction debounce(func, delay) {\n\t\tlet debounceTimer;\n\t\treturn function () {\n\t\t\tconst context = this;\n\t\t\tconst args = arguments;\n\t\t\tclearTimeout(debounceTimer);\n\t\t\tdebounceTimer = setTimeout(() => func.apply(context, args), delay);\n\t\t};\n\t}\n\n\t// Function to parse the cron expression\n\tconst parseCronExpression = () => {\n\t\tconst cronExpression = cronInput.value.trim();\n\t\ttry {\n\t\t\tif (cronExpression === '') {\n\t\t\t\tcronDescription.textContent = '';\n\t\t\t\tcronDescription.classList.remove('error');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Get human-readable description using cronstrue\n\t\t\tconst description = cronstrue.toString(cronExpression);\n\t\t\tcronDescription.textContent = description;\n\t\t\tcronDescription.classList.remove('error');\n\t\t} catch (error) {\n\t\t\tcronDescription.textContent = 'Invalid cron expression.';\n\t\t\tcronDescription.classList.add('error');\n\t\t}\n\t};\n\n\t// Add input event listener with debounce\n\tcronInput.addEventListener('input', debounce(parseCronExpression, 300));\n\n\t// Parse the default cron expression on load\n\tparseCronExpression();\n\n\tlet cron_loading = false\n\t// Handle model changes\n\tappsmith.onModelChange((newModel) => {\n\t\t// Check if newModel.cron is neither null, undefined, nor an empty string, and if it differs from the current input value\n\t\tif (!!newModel.cron && !!newModel.cron.trim() && newModel.cron !== cronInput.value.trim()) {\n\t\t\t// Update the input value only if it has changed\n\t\t\tcronInput.value = newModel.cron;\n\t\t\t// Update the cron description\n\t\t\tparseCronExpression();\n\t\t}\n\t\t\n\t\tconsole.log(\"cron_loading \", cron_loading)\n\t\tif (newModel.isLoading !== cron_loading) {\n\t\t\tconsole.log(\"newModel \", newModel.isLoading)\n\t\t\taiGenerateButton.innerHTML = !!newModel.isLoading ?\n\t\t\t\t\"Generating...\" : \"Generate\"\n\t\t\tcron_loading = newModel.isLoading\n\t\t}\n\t});\n\n\t// Event listener for AI prompt input (Enter key)\n\taiPromptInput.addEventListener('keydown', function (event) {\n\t\tif (event.key === 'Enter') {\n\t\t\tconst prompt = aiPromptInput.value.trim();\n\t\t\tif (prompt !== '' && !cron_loading) {\n\t\t\t\t// Update model with AI prompt and trigger event to generate cron\n\t\t\t\tappsmith.updateModel({ prompt: prompt });\n\t\t\t\tappsmith.triggerEvent('generate_cron_with_ai');\n\t\t\t}\n\t\t}\n\t});\n\n\t// Event listener for AI Generate button\n\taiGenerateButton.addEventListener('click', function () {\n\t\tconst prompt = aiPromptInput.value.trim();\n\t\tif (prompt !== '' && !cron_loading) {\n\t\t\t// Update model with AI prompt and trigger event to generate cron\n\t\t\tappsmith.updateModel({ prompt: prompt });\n\t\t\tappsmith.triggerEvent('generate_cron_with_ai');\n\t\t}\n\t});\n\n\tlet loader = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\" class=\"lds-spinner\" style=\"background: none;\">\n  <g transform=\"rotate(0 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.9166666666666666s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(30 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.8333333333333334s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(60 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.75s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(90 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.6666666666666666s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(120 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.5833333333333334s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(150 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.5s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(180 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.4166666666666667s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(210 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.3333333333333333s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(240 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.25s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(270 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.16666666666666666s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(300 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"-0.08333333333333333s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n  <g transform=\"rotate(330 50 50)\">\n    <rect x=\"47\" y=\"24\" rx=\"3\" ry=\"6\" width=\"6\" height=\"12\" fill=\"#000\">\n      <animate attributeName=\"opacity\" begin=\"0s\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"1;0\"></animate>\n    </rect>\n  </g>\n</svg>\n`\n}"
  },
  "version": 1,
  "widgetId": "4y3brap3ft",
  "widgetName": "cron_widget"
}